<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<bns:Component xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:bns="http://api.platform.boomi.com/" folderFullPath="Boomi_PeterAntony/Solutions/Boomi DevOps Centre/#Arch/Boomi DevOps Center Multi Tenant (Main/Dev Branch) 2022-09-01/Supporting Components (DO NOT DEPLOY)" componentId="ac87bee1-e41c-4d77-aa16-b42a1775c23d" version="7" name="Injection Point" type="script.processing" createdDate="2024-02-05T04:23:27Z" createdBy="peterantony@boomi.com" modifiedDate="2024-02-18T02:27:20Z" modifiedBy="peterantony@boomi.com" deleted="false" currentVersion="true" folderName="Supporting Components (DO NOT DEPLOY)" folderId="Rjo2NDc1NTYx" branchName="main" branchId="Qjo0NjgxMw">
  <bns:encryptedValues/>
  <bns:description>Implements a Test Point contained within a Data Process Shape. Calls:
API - Get Mock Documents
API - Get Mock Process Property Names
API - Create Mock Document</bns:description>
  <bns:object>
    <ProcessingScript xmlns="" language="groovy2" useCache="true">
      <script>import java.util.Properties;&#13;
import java.io.InputStream;&#13;
import com.boomi.execution.ExecutionManager;&#13;
import com.boomi.execution.ExecutionUtil;&#13;
import com.boomi.execution.ExecutionTask;&#13;
import java.net.HttpURLConnection;&#13;
import java.net.URL;&#13;
import java.io.ByteArrayInputStream;&#13;
import java.util.logging.Logger;&#13;
import java.util.Set;&#13;
import groovy.json.JsonSlurper;&#13;
import org.json.JSONArray;&#13;
import org.json.JSONObject;&#13;
&#13;
//*********** INJECTION POINT&#13;
&#13;
logger = ExecutionUtil.getBaseLogger();&#13;
_boomi_debug = ExecutionUtil.getDynamicProcessProperty("_boomi_debug");&#13;
String CICD_TEST_MODE = getProcessPropertyParameter("CICD_TEST_MODE");&#13;
String CICD_POINT_TYPE = getProcessPropertyParameter("CICD_POINT_TYPE");&#13;
if (CICD_POINT_TYPE==null || CICD_POINT_TYPE.trim().size()==0)&#13;
    CICD_POINT_TYPE=CICD_TEST_MODE;&#13;
if (CICD_TEST_MODE!=null &amp;&amp; CICD_TEST_MODE.trim().size()&gt;0 &amp;&amp; (CICD_POINT_TYPE==CICD_TEST_MODE || "TEST"==CICD_TEST_MODE || "TESTDOCSONLY"==CICD_TEST_MODE || "CAPTURE"==CICD_TEST_MODE || "CAPTUREDOCSONLY"==CICD_TEST_MODE))&#13;
{&#13;
    logger.info("CICD_TEST_MODE: " + CICD_TEST_MODE);&#13;
    &#13;
	// = "https://connect.boomi.com/ws/simple/";&#13;
	//userName = "devopscenter@boomi_davehock-T9DOG4.MG0YJ2";&#13;
    //token = "e56589cf-b3ff-4d62-8120-e9b8330d12cd";&#13;
	defaultApiServer = "http://localhost:9090/ws/simple/";&#13;
	userName = getProcessPropertyParameter("CICD_USERNAME");&#13;
	token = getProcessPropertyParameter("CICD_TOKEN");   &#13;
	&#13;
	String GETMOCKDOCUMENTS = "executeGetMockDocuments";&#13;
	String GETMOCKPROCESSPROPERTIES = "getMockProcessProperties";&#13;
	String CREATEMOCKDOCUMENT = "createMockDocument";&#13;
    &#13;
    if (getProcessPropertyParameter("CICD_APIM")=="true")&#13;
    {&#13;
        GETMOCKDOCUMENTS = "GetMockDocuments/";&#13;
        GETMOCKPROCESSPROPERTIES = "MockProcessProperties/";&#13;
        CREATEMOCKDOCUMENT = "MockDocument/";&#13;
        defaultApiServer = "http://localhost:9090/ws/rest/boomidevopscenter/";&#13;
    }&#13;
	&#13;
	String apiServer = getProcessPropertyParameter("CICD_API_ENDPOINT");&#13;
	if (apiServer==null || apiServer.size()==0)&#13;
	    apiServer = defaultApiServer; &#13;
&#13;
 	/***Build authentication***/&#13;
    &#13;
    if (userName==null || userName.size()==0)&#13;
        throw new Exception("CICD_USERNAME must be specified");&#13;
    if (token==null || token.size()==0)&#13;
        throw new Exception("CICD_TOKEN must be specified.");&#13;
    String userpass = userName+":"+token;&#13;
	String authenticationHeader = "Basic " +  userpass.bytes.encodeBase64().toString();&#13;
	&#13;
	/***Get Point ID ***/&#13;
    &#13;
    String pointIdStr = ExecutionUtil.getDynamicProcessProperty("CICD_POINT_ID");&#13;
	if (pointIdStr==null || pointIdStr.size()==0)&#13;
        throw new Exception("CICD_POINT_ID must be set to the ID value from the Test Portal");&#13;
    int pointId=pointIdStr.toInteger()&#13;
    &#13;
 	//***Find the true parent processId&#13;
    ExecutionTask execCurrent = ExecutionManager.getCurrent(); &#13;
    while(execCurrent.getParent()!=null)&#13;
        execCurrent=execCurrent.getParent();&#13;
&#13;
    //if in a child process launched from a Flow Control thread, we may want to set processId manually from the deployed parent process&#13;
 	String processId = getProcessPropertyParameter("CICD_PARENT_PROCESS_ID");&#13;
	if (processId==null || processId.size()==0)&#13;
	    processId = execCurrent.getProcessId();&#13;
&#13;
    //if in a child process launched from a Flow Control thread, we may want to set processId manually from the deployed parent process&#13;
 	String executionId = getProcessPropertyParameter("CICD_PARENT_EXECUTION_ID");&#13;
	if (executionId==null || executionId.size()==0)&#13;
	    executionId = execCurrent.getExecutionId();&#13;
	&#13;
    //***persist the number of times this test point has been visited***/&#13;
    //visitOffset is due to pub/sub testing were a batch of messages/tests arrives in the same process execution&#13;
    def visitOffsetDPP = ExecutionUtil.getDynamicProcessProperty("EXECUTION_INDEX");&#13;
    String visitIndexDPPName = "VISITINDEX_" + visitOffsetDPP + "_" + pointId;&#13;
    String visitIndexDPP = ExecutionUtil.getDynamicProcessProperty(visitIndexDPPName);&#13;
    long visitIndex=0;&#13;
    if (visitIndexDPP!=null &amp;&amp; visitIndexDPP.size()&gt;0)&#13;
        visitIndex=visitIndexDPP.toInteger();&#13;
    &#13;
    ExecutionUtil.setDynamicProcessProperty(visitIndexDPPName, (visitIndex+1)+"", false);&#13;
&#13;
    String testIdStr = getProcessPropertyParameter("CICD_TEST_ID");&#13;
    int testId=0;&#13;
    if (testIdStr!=null &amp;&amp; testIdStr.size()&gt;0)&#13;
        testId=testIdStr.toInteger();&#13;
&#13;
    String urlString;  &#13;
	def payloadJSON;	&#13;
	def responseJSON;&#13;
    if (CICD_TEST_MODE.indexOf("TEST")&gt;-1) {&#13;
        urlString = apiServer + GETMOCKDOCUMENTS;&#13;
		payloadJSON = captureDocuments(null, pointId, testId, processId, executionId, null, visitIndex, CICD_TEST_MODE);&#13;
 		responseJSON = postDocuments(urlString, authenticationHeader, payloadJSON);&#13;
		injectDocuments(responseJSON, dataContext);&#13;
    } else if (CICD_TEST_MODE == "CAPTURE" || CICD_TEST_MODE == "CAPTUREDOCSONLY") {&#13;
		urlString = apiServer + GETMOCKPROCESSPROPERTIES;&#13;
        //Get processProperties&#13;
        //First get process process properties so we can use the names to capture mock/expected data&#13;
		urlString+="?processId=" + processId+"&amp;injectionPointId="+pointId+"&amp;visitIndex="+visitIndex;&#13;
		urlString+="&amp;testId=" + testId;&#13;
		if (_boomi_debug=="true")&#13;
			urlString+="&amp;_boomi_debug=true";&#13;
		def processProperties;&#13;
		if (CICD_TEST_MODE != "CAPTUREDOCSONLY")&#13;
		    processProperties = getProcessPropertyNames(urlString, authenticationHeader);&#13;
    	payloadJSON = captureDocuments(dataContext, pointId, testId, processId, executionId, processProperties, visitIndex, CICD_TEST_MODE);&#13;
        urlString = apiServer + CREATEMOCKDOCUMENT;&#13;
 		responseJSON = postDocuments(urlString, authenticationHeader, payloadJSON);&#13;
		injectDocuments(responseJSON, dataContext);&#13;
    } else {&#13;
        throw new Exception("Unknown CICD_TEST_MODE mode value:" + CICD_TEST_MODE)&#13;
    }&#13;
} else {&#13;
    //This is what we do FAST to pass through when not TEST nor CAPTURE&#13;
    for( int i = 0; i &lt; dataContext.getDataCount(); i++ ) {&#13;
        InputStream is = dataContext.getStream(i);&#13;
        Properties props = dataContext.getProperties(i);&#13;
        dataContext.storeStream(is, props);&#13;
    }    &#13;
}&#13;
&#13;
def postDocuments(String urlString, String authenticationHeader, def payloadJSON)&#13;
{&#13;
	URL url = new URL(urlString);&#13;
	HttpURLConnection connection = null;&#13;
	try {&#13;
    	connection = (HttpURLConnection) url.openConnection();&#13;
    	connection.setRequestMethod("POST");&#13;
    	connection.setRequestProperty("Authorization", authenticationHeader);&#13;
    	if (_boomi_debug == "true")&#13;
        	connection.setRequestProperty("X-Boomi-Debug", "true");&#13;
    	connection.setDoOutput(true);&#13;
    	connection.setDoInput(true);&#13;
    	&#13;
    	byte[] input = payloadJSON.toString().getBytes();&#13;
    //	logger.info("Payload length:"+input.length+payloadJSON.toString());&#13;
    	connection.setRequestProperty("Content-Length", ""+input.length);&#13;
    	connection.getOutputStream().write(input, 0, input.length);  &#13;
        def response="";&#13;
        try {&#13;
            response=connection.getInputStream().getText();&#13;
        } catch (Exception e) {&#13;
    		def msg = connection.getResponseCode()+" "+e.toString();&#13;
    		if (connection.getErrorStream()!=null)&#13;
    		    msg += " " + connection.getErrorStream().getText();&#13;
    		msg+=  urlString + " " + connection.getResponseMessage();&#13;
    		logger.severe(msg);&#13;
    		throw new Exception(msg);&#13;
        }  &#13;
        if (response.size()&gt;0)&#13;
        {&#13;
        	def jsonSlurper = new JsonSlurper()&#13;
    	    return jsonSlurper.parseText(response);&#13;
        }&#13;
	} catch (Exception e) {&#13;
	    if (e.toString().contains("java.lang.RuntimePermission"))&#13;
	        throw new Exception("&lt;br/&gt;&lt;br/&gt;&lt;b&gt;ERROR - Injection and Test Points are only supported on local atoms.&lt;/b&gt;&lt;br/&gt;&lt;br/&gt;");&#13;
	    throw new Exception("&lt;br/&gt;&lt;br/&gt;" + e.toString() + "&lt;br/&gt;&lt;br/&gt;");&#13;
	}&#13;
&#13;
    return null;&#13;
}&#13;
&#13;
def getProcessPropertyNames(String urlString, def authenticationHeader)&#13;
{&#13;
    //Get processProperties&#13;
    //First get process expected process properties so we can use the names to get and upload them for comparison or query them and upload them for expected&#13;
    logger.info(urlString);&#13;
    URL url = new URL(urlString);&#13;
    HttpURLConnection connection = (HttpURLConnection) url.openConnection();&#13;
    connection.setRequestProperty("Authorization", authenticationHeader);&#13;
    connection.setRequestMethod("GET");&#13;
    def processProperties=null;&#13;
    try {&#13;
        if (connection.getInputStream()!=null)&#13;
        {&#13;
            def resp=connection.getInputStream().getText();&#13;
            if (resp!=null &amp;&amp; resp.size()&gt;0)&#13;
            {&#13;
                def jsonSlurper = new JsonSlurper()&#13;
                payload = jsonSlurper.parseText(resp);&#13;
                logger.info(payload.toString());&#13;
                processProperties=payload.processProperties;&#13;
            }&#13;
        }&#13;
    } catch (Exception e) {&#13;
	    def msg = connection.getResponseCode()+" "+e.toString();&#13;
	    if (connection.getErrorStream()!=null)&#13;
	        msg+=" " + connection.getErrorStream().getText() + " " + urlString + " " + connection.getResponseMessage();&#13;
	    logger.severe(msg);&#13;
	    throw new Exception(msg);&#13;
    }&#13;
	return processProperties;&#13;
}&#13;
&#13;
def captureDocuments(def dataContext, int pointId, int testId, String processId, String executionId&#13;
	, def processProperties, long visitIndex, String CICD_TEST_MODE)&#13;
{&#13;
	def payloadJSON = new JSONObject();&#13;
	def documents = new JSONArray();&#13;
	payloadJSON.put("pointId", pointId);&#13;
	payloadJSON.put("processId", processId);&#13;
	payloadJSON.put("visitIndex", visitIndex);&#13;
	payloadJSON.put("executionId", executionId);&#13;
	payloadJSON.put("testSuiteExecutionId", getProcessPropertyParameter("CICD_SUITE_EXECUTION_ID"));&#13;
	payloadJSON.put("testId", testId);&#13;
	payloadJSON.put("documents", documents);&#13;
	payloadJSON.put("testMode", CICD_TEST_MODE);&#13;
	payloadJSON.put("deployedExecution", getProcessPropertyParameter("CICD_DEPLOYED_EXECUTION"));&#13;
	if (dataContext!=null)&#13;
		for(int i = 0; i &lt; dataContext.getDataCount(); i++ ) {&#13;
			InputStream is = dataContext.getStream(i);&#13;
			Properties props = dataContext.getProperties(i);&#13;
	//		String text = is.getText().replaceAll("\\r","").replaceAll("\\n","");&#13;
			byte[] docBytes = is.getBytes();&#13;
			def document = new JSONObject();&#13;
			documents.put(document);&#13;
			document.put("docIndex", i);&#13;
			document.put("docContents",  docBytes.encodeBase64().toString());&#13;
			if (CICD_TEST_MODE != "CAPTUREDOCSONLY")&#13;
			{&#13;
    			def propArray = new JSONArray();&#13;
    			document.put("documentProperties", propArray);&#13;
    			Set&lt;String&gt; keys = props.stringPropertyNames();&#13;
    			for (String key : keys) {&#13;
    				def propItem = new JSONObject();&#13;
    				propArray.put(propItem);&#13;
    				propItem.put("propName", key);&#13;
    				String propValue = props.getProperty(key);&#13;
    				if (propValue!=null &amp;&amp; propValue.size()&gt;0)&#13;
    				{&#13;
    					propValue = propValue.bytes.encodeBase64().toString();&#13;
    				} else {&#13;
    					propValue=""&#13;
    				}&#13;
    				propItem.put("propValue", propValue); &#13;
    			}		&#13;
			}&#13;
//We don't inject here, only capture...&#13;
//			def bis = new ByteArrayInputStream(docBytes);&#13;
//			dataContext.storeStream(bis, props);&#13;
		}&#13;
&#13;
	if (processProperties!=null)&#13;
    {&#13;
        propArray = new JSONArray();&#13;
	    payloadJSON.put("processProperties", propArray);&#13;
    	for (int i=0; i&lt;processProperties.size(); i++)&#13;
    	{&#13;
			def propItem = new JSONObject();&#13;
			propArray.put(propItem);&#13;
			propItem.put("propName", processProperties[i].propName);&#13;
			String propValue = ExecutionUtil.getDynamicProcessProperty(processProperties[i].propName);&#13;
			if (propValue==null)&#13;
			    propValue = "";&#13;
			else&#13;
			    propValue = propValue.bytes.encodeBase64().toString();&#13;
			propItem.put("propValue", propValue);&#13;
    	}&#13;
    }&#13;
	return payloadJSON;&#13;
}&#13;
&#13;
def injectDocuments(def payload, def dataContext)&#13;
{	&#13;
    if (payload!=null)&#13;
    {&#13;
    	if (payload.processProperties!=null)&#13;
    	{&#13;
    		for (int i=0; i&lt;payload.processProperties.size(); i++)&#13;
    		{&#13;
    			String propName=payload.processProperties[i].propName;&#13;
    			String propValue=payload.processProperties[i].propValue;&#13;
    			if (propValue!=null &amp;&amp; propValue.size()&gt;0)&#13;
    			{&#13;
    				propValue = new String(propValue.decodeBase64());&#13;
    			} else {&#13;
    				propValue=""&#13;
    			}&#13;
    			logger.info("Inject DPP " + propName + ":" +propValue);&#13;
    			ExecutionUtil.setDynamicProcessProperty(propName,  propValue, false);&#13;
    		}&#13;
    	}&#13;
    	if (payload.documents != null)&#13;
    	{&#13;
    		for (int i=0; i&lt;payload.documents.size(); i++)&#13;
    		{&#13;
    			def document = payload.documents[i];&#13;
    			Properties props=new Properties();&#13;
    			if (document.documentProperties!=null)&#13;
    				for (int j=0; j&lt;document.documentProperties.size(); j++)&#13;
    				{&#13;
    					String propValue = document.documentProperties[j].propValue;&#13;
    					if (propValue==null)&#13;
    						propValue="";&#13;
    					else&#13;
    						propValue = new String(propValue.decodeBase64());&#13;
    					props.setProperty(document.documentProperties[j].propName, propValue);&#13;
    				}&#13;
    			byte[] docBytes;&#13;
    			if (document.docContents==null)&#13;
    			{&#13;
    				docBytes = "".getBytes();&#13;
    			}&#13;
    			else&#13;
    			{&#13;
    				docBytes = document.docContents.decodeBase64();&#13;
    			}&#13;
    			dataContext.storeStream(new ByteArrayInputStream(docBytes), props);&#13;
    		}&#13;
    	}&#13;
    }&#13;
}&#13;
&#13;
def getProcessPropertyParameter(String name)&#13;
{&#13;
    String propValue = ExecutionUtil.getDynamicProcessProperty(name);&#13;
    &#13;
    logger.info(name + ": " + propValue);&#13;
    if (propValue==null || propValue.size()==0)&#13;
        propValue = ExecutionUtil.getDynamicProcessProperty("header_"+name); //passed in by API &amp;CICD_TEST_ID=&#13;
    return propValue;&#13;
}</script>
    </ProcessingScript>
  </bns:object>
</bns:Component>
