name: Build and Deploy Package
on:
  push:
    branches:
      - main
    paths:
      - 'InterfaceDefs/INT-*.mf'

# Controls when the workflow will run
#on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
#  push:
#    branches: [ "main" ]
#  pull_request:
#    branches: [ "main" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  createPackage:
    runs-on: [self-hosted, linux, X64]
    outputs:
      runDeploy: ${{ steps.createPackage.outputs.deploy }}
    
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3
        #with:
        #  fetch-depth: 0
        #  path: INT-001

      - name: Changed Files
        id: changed-files
        uses: tj-actions/changed-files@v37.5.2

      # Runs a set of commands using the runners shell
      - name: Create Package
        id: createPackage
        run: |
          BoomiAccount=${{ vars.BOOMI_ACCOUNT }}
          BoomiUsername=${{ vars.BOOMI_USERNAME }}
          API=${{ secrets.API }}
          RepoURL=${{ github.server_url }}
          RepoName=${{ github.repository }}
          RepoPath=${RepoURL}/${RepoName}
          GITUsername=${{ github.repository_owner }}
          GITUseremail=${{ vars.EMAIL }}
          CodeFolderXML=${{ vars.CODEFOLDER }}
          
          for file in ${{ steps.changed-files.outputs.all_changed_files }}; do
            funcTest=0
            
            compId=$(grep '^componentId=' $file | cut -f2 -d'=')
            compType=$(grep '^componentType=' $file | cut -f2 -d'=')
            compVer=$(grep '^ver=' $file | cut -f2 -d'=')
            compNotes=$(grep '^buildNotes=' $file | cut -f2 -d'=')
            deployPackage=$(grep '^deploy=' $file | cut -f2 -d'=')
            
            export WD=${GITHUB_WORKSPACE}/cli/scripts/
            export WORKSPACE=${GITHUB_WORKSPACE}/cli/scripts/
            export GITHUB_WORKSPACE

            find ${GITHUB_WORKSPACE} -name *.sh -exec chmod 700 {} \;

            chmod +x "${GITHUB_WORKSPACE}/cli/scripts/bin/propertiesCICD.sh"
            chmod +x ${GITHUB_WORKSPACE}/cli/scripts/bin/common.sh
            chmod +x "${GITHUB_WORKSPACE}/cli/scripts/initcrPackage.sh"

            source "${GITHUB_WORKSPACE}/cli/scripts/bin/propertiesCICD.sh" $BoomiAccount $BoomiUsername $API $RepoPath $GITUsername $GITUseremail $CodeFolderXML
            source ${GITHUB_WORKSPACE}/cli/scripts/bin/common.sh

            "${GITHUB_WORKSPACE}/cli/scripts/initcrPackage.sh" componentId=$compId packageVersion=$compVer componentType=$compType notes="$compNotes" extractComponentXmlFolder="$CodeFolderXML"
          done
          
          echo "deploy=$deployPackage" >> "$GITHUB_OUTPUT"

  deploytoDev:
    runs-on: [self-hosted, linux, X64]
    needs: createPackage
    if: needs.createPackage.outputs.runDeploy == '1'
    
    steps:
      - uses: actions/checkout@v3
        #with:
        #  fetch-depth: 0
        #  path: INT-001

      - name: Changed Files
        id: changed-files
        uses: tj-actions/changed-files@v37.5.2
        
      # Runs a set of commands using the runners shell
      - name: Deploy Package
        run: |
          BoomiAccount=${{ vars.BOOMI_ACCOUNT }}
          BoomiAccount=${{ vars.BOOMI_ACCOUNT }}
          BoomiUsername=${{ vars.BOOMI_USERNAME }}
          API=${{ secrets.API }}
          RepoURL=${{ github.server_url }}
          RepoName=${{ github.repository }}
          RepoPath=${RepoURL}/${RepoName}
          GITUsername=${{ github.repository_owner }}
          GITUseremail=${{ vars.EMAIL }}
          CodeFolderXML=${{ vars.CODEFOLDER }}
          POSTMAN=${{ secrets.POSTMAN }}
          
          postmanInst=0
          
          for file in ${{ steps.changed-files.outputs.all_changed_files }}; do
            funcTest=0
            
            compId=$(grep '^componentId=' $file | cut -f2 -d'=')
            compType=$(grep '^componentType=' $file | cut -f2 -d'=')
            compVer=$(grep '^ver=' $file | cut -f2 -d'=')
            envName=$(grep '^targetEnv=' $file | cut -f2 -d'=')
            listenerStatus=$(grep '^listenerStatus=' $file | cut -f2 -d'=')
            compNotes=$(grep '^buildNotes=' $file | cut -f2 -d'=')
            collectionId=$(grep '^collectionId=' $file | cut -f2 -d'=')
            testId=$(grep '^testId=' $file | cut -f2 -d'=')
            funcTest=$(grep '^funcTest=' $file | cut -f2 -d'=')

            export WD=${GITHUB_WORKSPACE}/cli/scripts/
            export WORKSPACE=${GITHUB_WORKSPACE}/cli/scripts/
            export GITHUB_WORKSPACE

            if [[ $postmanInst == 0  && $funcTest == 1 ]]
            then
              #sudo apt-get install -y curl
              #sh 'curl -o- "https://dl-cli.pstmn.io/install/linux64.sh" | sh'
              /usr/local/bin/postman login --with-api-key $POSTMAN
              postmanInst=1
            fi
            
            find ${GITHUB_WORKSPACE} -name *.sh -exec chmod 700 {} \;

            chmod +x "${GITHUB_WORKSPACE}/cli/scripts/bin/propertiesCICD.sh"
            chmod +x ${GITHUB_WORKSPACE}/cli/scripts/bin/common.sh
            chmod +x "${GITHUB_WORKSPACE}/cli/scripts/initcrPackage.sh"

            source "${GITHUB_WORKSPACE}/cli/scripts/bin/propertiesCICD.sh" $BoomiAccount $BoomiUsername $API $RepoPath $GITUsername $GITUseremail $CodeFolderXML
            source ${GITHUB_WORKSPACE}/cli/scripts/bin/common.sh

            "${GITHUB_WORKSPACE}/cli/scripts/initdeployPackage.sh" componentId=$compId packageVersion=$compVer componentType=$compType notes="$compNotes" env=$envName listenerStatus=$listenerStatus
            
            if [ $funcTest == 1 ]
            then
              echo Sleeping...
              sleep 15
              echo Running Postman Collection
              postmanOut=$(/usr/local/bin/postman collection run "$collectionId" -i "$testId")       
              postmanResult=$(echo $postmanOut | grep '200 OK' | wc -l)
              echo output: $postmanResult
              if [ "$postmanResult" == 0 ]
              then
                  echo "::error Postman test failed"
                  exit 1
              elif [ "$postmanResult" == 1 ]
              then
                echo "Postman test OK"
                exit 0
              fi
            fi
          done

  deploytoTest:
    runs-on: [self-hosted, linux, X64]
    needs: deploytoDev
    environment:
      name: "Test"
    if: needs.createPackage.outputs.runDeploy == '1'
    
    steps:
      - uses: actions/checkout@v3
        #with:
        #  fetch-depth: 0
        #  path: INT-001

      - name: Changed Files
        id: changed-files
        uses: tj-actions/changed-files@v37.5.2
        
      # Runs a set of commands using the runners shell
      - name: Deploy Package
        run: |
          BoomiAccount=${{ vars.BOOMI_ACCOUNT }}
          BoomiAccount=${{ vars.BOOMI_ACCOUNT }}
          BoomiUsername=${{ vars.BOOMI_USERNAME }}
          API=${{ secrets.API }}
          RepoURL=${{ github.server_url }}
          RepoName=${{ github.repository }}
          RepoPath=${RepoURL}/${RepoName}
          GITUsername=${{ github.repository_owner }}
          GITUseremail=${{ vars.EMAIL }}
          CodeFolderXML=${{ vars.CODEFOLDER }}
          for file in ${{ steps.changed-files.outputs.all_changed_files }}; do
            funcTest=0
            
            compId=$(grep '^componentId=' $file | cut -f2 -d'=')
            compType=$(grep '^componentType=' $file | cut -f2 -d'=')
            compVer=$(grep '^ver=' $file | cut -f2 -d'=')
            envName=$(grep '^targetEnv=' $file | cut -f2 -d'=')
            listenerStatus=$(grep '^listenerStatus=' $file | cut -f2 -d'=')
            compNotes=$(grep '^buildNotes=' $file | cut -f2 -d'=')
            
            export WD=${GITHUB_WORKSPACE}/cli/scripts/
            export WORKSPACE=${GITHUB_WORKSPACE}/cli/scripts/
            export GITHUB_WORKSPACE

            find ${GITHUB_WORKSPACE} -name *.sh -exec chmod 700 {} \;

            chmod +x "${GITHUB_WORKSPACE}/cli/scripts/bin/propertiesCICD.sh"
            chmod +x ${GITHUB_WORKSPACE}/cli/scripts/bin/common.sh
            chmod +x "${GITHUB_WORKSPACE}/cli/scripts/initcrPackage.sh"

            source "${GITHUB_WORKSPACE}/cli/scripts/bin/propertiesCICD.sh" $BoomiAccount $BoomiUsername $API $RepoPath $GITUsername $GITUseremail $CodeFolderXML
            source ${GITHUB_WORKSPACE}/cli/scripts/bin/common.sh

            "${GITHUB_WORKSPACE}/cli/scripts/initdeployPackage.sh" componentId=$compId packageVersion=$compVer componentType=$compType notes="$compNotes" env=$envName listenerStatus=$listenerStatus
          done
