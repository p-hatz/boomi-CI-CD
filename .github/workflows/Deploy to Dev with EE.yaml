name: Deploy Package to Dev
on:
  workflow_dispatch:
    inputs:
      compId:
        description: 'Component Id'
        required: true
      compVer:
        description: 'Component version'
        required: true
      environment:
        description: 'Environment to run tests against'
        type: environment
        required: true
        
  push:
    branches:
      - main
    paths:
      - 'InterfaceDefs/*.Dev.EE'
env:
  ID: ${{ github.run_id }}-${{ github.run_attempt }}
  
jobs:
  deploytoDev:
    runs-on: [self-hosted, linux, X64]
    environment:
      name: "Dev"
    steps:
      - uses: actions/checkout@v3
      
      - name: Changed Files
        id: changed-files
        uses: tj-actions/changed-files@v37.5.2
        
      # Runs a set of commands using the runners shell
      - name: Deploy Package
        run: |
          sudo apt-get install -y libxml2-utils jq
          
          BoomiAccount=${{ vars.BOOMI_ACCOUNT }}
          BoomiUsername=${{ vars.BOOMI_USERNAME }}
          API=${{ secrets.API }}
          
          devEnvId=${{ vars.EnvId }}
          environmentId=$devEnvId
          RepoURL=${{ github.server_url }}
          RepoName=${{ github.repository }}
          RepoPath=${RepoURL}/${RepoName}
          GITUsername=${{ github.repository_owner }}
          GITUseremail=${{ vars.EMAIL }}
          CodeFolderXML=${{ vars.CODEFOLDER }}
          VaultBase=${{ vars.VAULTBASE }}
          VaultPath=${{ secrets.VAULT_PATH }}
          VaultClientId=${{ secrets.VAULT_CLIENT_ID }}
          VaultClientSec=${{ secrets.VAULT_SECRET }}
          _Token=$(curl --location "https://auth.idp.hashicorp.com/oauth2/token" --header "Content-Type: application/x-www-form-urlencoded" --data-urlencode "client_id=$VaultClientId" --data-urlencode "client_secret=$VaultClientSec" --data-urlencode "grant_type=client_credentials" --data-urlencode "audience=https://api.hashicorp.cloud" | jq -r .access_token)
          VaultPathFull=$VaultBase$VaultPath

            export WD=${GITHUB_WORKSPACE}/cli/scripts/
            export WORKSPACE=${GITHUB_WORKSPACE}/cli/scripts/
            export GITHUB_WORKSPACE

            find ${GITHUB_WORKSPACE} -name *.sh -exec chmod 700 {} \;
          
          for file in ${{ steps.changed-files.outputs.all_changed_files }}; do
            _eeCompId=$(grep '^eeCompId=' $file | cut -f2 -d'=')
            componentId=$_eeCompId
            
            _eeCompType=$(grep '^eeCompType=' $file | cut -f2 -d'=')
            componentType=$_eeCompType
            
            _secKey=$(grep '^eeKey=' $file | cut -f2 -d'=')
            _secKeyVer=$(grep '^eeKeyVer=' $file | cut -f2 -d'=')
            _secKey_KeyVer=$(echo $_secKey"~"$_secKeyVer)
            echo _secKey_KeyVer is: $_secKey_KeyVer
            
            VaultSec=$(curl  --location "$VaultPathFull" --request GET --header "Authorization: Bearer $_Token")
            echo $VaultSec > /tmp/vaultsec.out
            if [ ! -z "$VaultSec" ]
            then
              _keyValVer=$(echo $VaultSec | jq -r '.secrets[].name + "~" + (.secrets[].latest_version|tostring)')
              echo $_keyValVer > /tmp/keyValVer.out
              echo $_secKey_KeyVer > /tmp/secKey_KeyVer.out
              if [  "$_secKey_KeyVer" == "$_keyValVer" ]
              then
                echo debug0
                _eeKeyVal=$(echo $VaultSec | jq -r '.secrets[].static_version.value')
                if [ ! -z "$_eeKeyVal" ]
                then
                fieldVal=$_eeKeyVal
                 echo debug1
                 source ${GITHUB_WORKSPACE}/cli/scripts/bin/common.sh
                  source "${GITHUB_WORKSPACE}/cli/scripts/bin/propertiesCICD.sh" $BoomiAccount $BoomiUsername $API $RepoPath $GITUsername $GITUseremail $CodeFolderXML
                  echo componentType is $componentType
                  source "${GITHUB_WORKSPACE}/cli/scripts/bin/updateExtensions.sh" $environmentId $componentId $componentType $fieldVal
                  echo debug3
                fi
              fi
            fi
          done
          
          exit
          
          mkdir -p ${GITHUB_WORKSPACE}/tmp

          for file in ${{ steps.changed-files.outputs.all_changed_files }}; do
            compId=$(grep '^componentId=' $file | cut -f2 -d'=')
            compType=$(grep '^componentType=' $file | cut -f2 -d'=')
            compVer=$(grep '^ver=' $file | cut -f2 -d'=')
            envName=$(grep '^targetEnv=' $file | cut -f2 -d'=')
            listenerStatus=$(grep '^listenerStatus=' $file | cut -f2 -d'=')
            compNotes=$(grep '^deployNotes=' $file | cut -f2 -d'=')
            codeCheck=$(grep '^codeCheck=' $file | cut -f2 -d'=')

            compCount=1
            compCount=$(echo "$compId" | awk -F "," '{print NF-1}')
            compCount=$((compCount + 1))

            codeCheck=$(grep '^codeCheck=' $file | cut -f2 -d'=')
            
            export WD=${GITHUB_WORKSPACE}/cli/scripts/
            export WORKSPACE=${GITHUB_WORKSPACE}/cli/scripts/
            export GITHUB_WORKSPACE

            find ${GITHUB_WORKSPACE} -name *.sh -exec chmod 700 {} \;

            source "${GITHUB_WORKSPACE}/cli/scripts/bin/propertiesCICD.sh" $BoomiAccount $BoomiUsername $API $RepoPath $GITUsername $GITUseremail $CodeFolderXML
            source ${GITHUB_WORKSPACE}/cli/scripts/bin/common.sh
            
            _envId=${{ vars.envId }}
            for (( _compIdx=1 ; _compIdx <= $compCount ; _compIdx++ )) ; do
              _compId=$(echo $compId | cut -f $_compIdx -d",")
              _compType=$(echo $compType | cut -f $_compIdx -d",")
              echo "component id set to: $_compId"
              _checkDeployment=0
              
              source "${GITHUB_WORKSPACE}/cli/scripts/initCheckPackage.sh" componentId=$_compId componentType=$_compType packageVersion=$compVer envId=$_envId codeCheck=$codeCheck checkDeployment=$_checkDeployment
              
              echo "calling deployPackage (packageId: $packageId)"
              "${GITHUB_WORKSPACE}/cli/scripts/initdeployPackage.sh" componentId=$_compId packageVersion=$compVer componentType=$_compType notes="$compNotes" env=$envName listenerStatus=$listenerStatus
            done
          done
