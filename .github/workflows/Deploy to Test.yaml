name: Build and Deploy Package
on:
  workflow_dispatch:
    inputs:
      compId:
        description: 'Component Id'
        required: true
      compVer:
        description: 'Component version'
        required: true
      environment:
        description: 'Environment to run tests against'
        type: environment
        required: true
        
  push:
    branches:
      - main
    paths:
      - 'InterfaceDefs/*.mf.Test'
env:
  AWS_ACCESS_KEY_ID: ${{ secrets.ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.ID2 }}
  AWS_DEFAULT_REGION: ap-southeast-2
  AWS_DEFAULT_OUTPUT: json
      
  ID: ${{ github.run_id }}-${{ github.run_attempt }}
  
jobs:
  preReqs:
    runs-on: [self-hosted, linux, X64]
    #runs-on: [ubuntu-latest]
    steps:
      - uses: actions/checkout@v3
      - name: Changed Files
        id: changed-files
        uses: tj-actions/changed-files@v37.5.2

      - name: Install AWS CLI
        id: install-aws-cli
        uses: unfor19/install-aws-cli-action@v1
        with:
          version: 2                         # default
          verbose: false                     # default
          arch: amd64                        # allowed values: amd64, arm64
          bindir: "/usr/local/bin"           # default
          installrootdir: "/usr/local"       # default
          rootdir: ""                        # defaults to "PWD"
          
          #workdir: ""                        # defaults to "PWD/unfor19-awscli"    - name: Install AWS CLI v2 and OS Packages
          #    run:  |
          #sudo apt-get install -y curl
          #not needed for GitHub hosted runners
          #curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "${GITHUB_WORKSPACE}/awscliv2.zip"
          #unzip -q /tmp/awscliv2.zip -d /tmp
          #unzip -q ${GITHUB_WORKSPACE}/awscliv2.zip -d ${GITHUB_WORKSPACE}/awscli
          #rm ${GITHUB_WORKSPACE}/awscliv2.zip
          #sudo /tmp/aws/install --update
          #rm -rf /tmp/aws/

      - name: Create tmp directory
        id: tmpDir
        run: |
          mkdir -p ${GITHUB_WORKSPACE}/tmp
          
          deployPackageHWM=5        
          echo "deploy=$deployPackageHWM" >> "$GITHUB_OUTPUT"
  
  deploytoTest:
    runs-on: [self-hosted, linux, X64]
    #runs-on: [ubuntu-latest]
    needs: preReqs
    environment:
      name: "Test"
    steps:
      - uses: actions/checkout@v3
      
      - name: Changed Files
        id: changed-files
        uses: tj-actions/changed-files@v37.5.2
        
      # Runs a set of commands using the runners shell
      - name: Deploy Package
        run: |
          sudo apt-get install -y libxml2-utils jq
          
          BoomiAccount=${{ vars.BOOMI_ACCOUNT }}
          BoomiAccount=${{ vars.BOOMI_ACCOUNT }}
          BoomiUsername=${{ vars.BOOMI_USERNAME }}
          API=${{ secrets.API }}
          RepoURL=${{ github.server_url }}
          RepoName=${{ github.repository }}
          RepoPath=${RepoURL}/${RepoName}
          GITUsername=${{ github.repository_owner }}
          GITUseremail=${{ vars.EMAIL }}
          CodeFolderXML=${{ vars.CODEFOLDER }}
          POSTMAN=${{ secrets.POSTMAN }}

          _bot=${{ secrets.BOT }}

          mkdir -p ${GITHUB_WORKSPACE}/tmp
          
          for file in ${{ steps.changed-files.outputs.all_changed_files }}; do
            funcTestPostman=0
            funcTestBDC=0
            postmanInst=0
            perfTest=0

            compId=$(grep '^componentId=' $file | cut -f2 -d'=')
            compType=$(grep '^componentType=' $file | cut -f2 -d'=')
            compVer=$(grep '^ver=' $file | cut -f2 -d'=')
            envName=$(grep '^deploy=' $file | cut -f2 -d'=')
            listenerStatus=$(grep '^listenerStatus=' $file | cut -f2 -d'=')
            compNotes=$(grep '^deployNotes=' $file | cut -f2 -d'=')

            compCount=1
            compCount=$(echo "$compId" | awk -F "," '{print NF-1}')
            compCount=$((compCount + 1))

            sampleProc=$(grep '^sample=' $file | cut -f2 -d'=')
            funcTestPostman=$(grep '^funcTestPostman=' $file | cut -f2 -d'=')
            collectionId=$(grep '^collectionId=' $file | cut -f2 -d'=')
            codeCheck=$(grep '^codeCheck=' $file | cut -f2 -d'=')
            
            export WD=${GITHUB_WORKSPACE}/cli/scripts/
            export WORKSPACE=${GITHUB_WORKSPACE}/cli/scripts/
            export GITHUB_WORKSPACE

            find ${GITHUB_WORKSPACE} -name *.sh -exec chmod 700 {} \;

            #chmod +x "${GITHUB_WORKSPACE}/cli/scripts/bin/propertiesCICD.sh"
            #chmod +x ${GITHUB_WORKSPACE}/cli/scripts/bin/common.sh
            #chmod +x "${GITHUB_WORKSPACE}/cli/scripts/initcrPackage.sh"
            #chmod +x "${GITHUB_WORKSPACE}/cli/scripts/initCheckPackage.sh"

            source "${GITHUB_WORKSPACE}/cli/scripts/bin/propertiesCICD.sh" $BoomiAccount $BoomiUsername $API $RepoPath $GITUsername $GITUseremail $CodeFolderXML
            source ${GITHUB_WORKSPACE}/cli/scripts/bin/common.sh
            
            envName=${{ vars.envTest }}
            devEnvId=${{ vars.devEnvId }}
            for (( _compIdx=1 ; _compIdx <= $compCount ; _compIdx++ )) ; do
              _compId=$(echo $compId | cut -f $_compIdx -d",")
              _compType=$(echo $compType | cut -f $_compIdx -d",")
              echo "component id set to: $_compId"

              source "${GITHUB_WORKSPACE}/cli/scripts/initCheckPackage.sh" componentId=$_compId componentType=$_compType packageVersion=$compVer envId=$devEnvId codeCheck=$codeCheck
              
              echo "calling deployPackage (packageId: $packageId)"
              "${GITHUB_WORKSPACE}/cli/scripts/initdeployPackage.sh" componentId=$_compId packageVersion=$compVer componentType=$_compType notes="$compNotes" env=$envName listenerStatus=$listenerStatus

              _msg="$envName: Component '$_compId ' (ver: '$compVer' ) deployed"
              curl -d text="$_msg" -d "channel=release" -H "Authorization: Bearer $_bot" -X POST https://slack.com/api/chat.postMessage
            done
          
            #_id=$RANDOM
            _id=${{ env.ID }}
            echo random: $_id
            
            _timeOut=${{ vars.TIMEOUT }}
            if [[ $_timeOut == 0 ]]
            then
              echo Need to set timeout
              _timeOut=30
            fi

            if [[ $sampleProc == 1 ]]
            then
              echo Sampling Proc...
              "${GITHUB_WORKSPACE}/cli/scripts/sampleProc.sh" $_timeOut $_id&
            fi

            if [[ $postmanInst == 0  && $funcTestPostman == 1 ]]
            then
              echo Installing Postman...
              curl -o- "https://dl-cli.pstmn.io/install/linux64.sh" | sh
              /usr/local/bin/postman login --with-api-key $POSTMAN
              postmanInst=1
            fi

            if [ $funcTestPostman == 1 ]
            then
              echo Sleeping...
              sleep 15
              echo Running Postman Collection
              _collectionIdFile=$(echo $collectionId | sed "s/\"//g")
              _resultFile=$(echo $collectionId | awk -F/ '{print $NF}' | tr -d ' ' | sed "s/\"//g ; s/'//g")
              
              /usr/local/bin/postman collection run "${GITHUB_WORKSPACE}/$_collectionIdFile" > ${GITHUB_WORKSPACE}/tmp/$_resultFile.out

              cat ${GITHUB_WORKSPACE}/tmp/$_resultFile.out
              sed -i 's/\[90m//g ; s/\[30m//g' ${GITHUB_WORKSPACE}/tmp/$_resultFile.out
              
              postmanResult=$(grep 'test-scripts' ${GITHUB_WORKSPACE}/tmp/$_resultFile.out | tr -s ' ' '|' | awk -F "|" '{ print $6 }')
              #postmanResult=$(echo $postmanOut | grep '200 OK' | wc -l)
              echo Postman Result: $postmanResult
              if [ "$postmanResult" == 0 ]
              then
                echo "Postman test OK"
              elif [ "$postmanResult" == 1 ]
              then
                echo "Postman test failed"
                exit 1
              fi
            fi

            perfTest=$(grep '^perfTest=' $file | cut -f2 -d'=')
            if [[ $perfTest == 1 ]]
            then
              _perfTestFile=$(grep '^perfTestFile=' $file | cut -f2 -d'=')
              _perfThreshold=$(grep '^perfThreshold=' $file | cut -f2 -d'=')

              rm -fr "${GITHUB_WORKSPACE}/tmp/jmeter"
              mkdir -p "${GITHUB_WORKSPACE}/tmp/jmeter"
              
              wget -O ${GITHUB_WORKSPACE}/tmp/jmeter.tgz https://dlcdn.apache.org//jmeter/binaries/apache-jmeter-5.6.3.tgz
              tar -zxvf ${GITHUB_WORKSPACE}/tmp/jmeter.tgz -C ${GITHUB_WORKSPACE}/tmp/jmeter

              _perfTestFile=$(echo $_perfTestFile | sed "s/\"//g")
              _resultFile=$(echo $_perfTestFile | awk -F/ '{print $NF}' | tr -d ' ' | sed "s/\"//g ; s/'//g")
              ${GITHUB_WORKSPACE}/tmp/jmeter/apache-jmeter-5.6.3/bin/jmeter.sh -n -t "${GITHUB_WORKSPACE}/$_perfTestFile" > ${GITHUB_WORKSPACE}/tmp/jmeter/$_resultFile.out

              _maxTime=$(cat ${GITHUB_WORKSPACE}/tmp/jmeter/$_resultFile.out | grep 'summary =' | grep Max: | awk -F" " '{ print $13 }')
              echo "maxtime: $_maxTime (threshold: $_perfThreshold)"

              #<= didn't seem to work (?)
              if [[ $_maxTime < $_perfThreshold  || $_maxTime == $_perfThreshold ]]
              then
                echo "Performance OK"
              fi

              if [[ $_maxTime > $_perfThreshold ]]
              then
                echo "Performance not OK!"
                exit 1
              fi
              
              rm -fr "${GITHUB_WORKSPACE}/tmp/jmeter"
            fi

            secScan=$(grep '^APIScan=' $file | cut -f2 -d'=')
            if [[ $secScan == 1 ]]
            then
              _secScanFile=$(grep '^APIScanFile=' $file | cut -f2 -d'=')
              _secScanURL=$(grep '^APIScanURL=' $file | cut -f2 -d'=')
              python3 "${GITHUB_WORKSPACE}/$_secScanFile" > /tmp/APIScan.out
              _alerts=$(grep "Number of alerts" /tmp/APIScan.out | awk '{ print $4 }')
              if [ "$_alerts" > 0 ]
              then
                echo "API Security Scan found $_alerts !"
                exit 1
              fi
            fi
              
            
            #we run spark separately because the `timeout` command terminates the script
            #spark < /tmp/$_id.sample > /tmp/$_id.sample.out
            #cat /tmp/$_id.sample
            #cat /tmp/$_id.sample.out
            #sample=1
          done

      #- name: System Usage
      #  run: |
      #    _timeOut=30
      #    if [[ $sample == 1 ]]
      #    then
       #       echo Sampling Proc...
       #       "${GITHUB_WORKSPACE}/cli/scripts/sampleProc.sh" $_timeOut $ID
       #       sample=1
       #   fi
