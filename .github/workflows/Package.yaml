name: Build and Deploy Package
on:
  workflow_dispatch:
    inputs:
      compId:
        description: 'Component Id'
        required: true
      compVer:
        description: 'Component version'
        required: true
      environment:
        description: 'Environment to run tests against'
        type: environment
        required: true
        
  push:
    branches:
      - main
    paths:
      - 'InterfaceDefs/*'
env:
  AWS_ACCESS_KEY_ID: ${{ secrets.ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.ID2 }}
  AWS_DEFAULT_REGION: ap-southeast-2
  AWS_DEFAULT_OUTPUT: json
      
  ID: ${{ github.run_id }}-${{ github.run_attempt }}
  
jobs:
  preReqs:
    runs-on: [self-hosted, linux, X64]
    #runs-on: [ubuntu-latest]
    steps:
      - uses: actions/checkout@v3
      - name: Changed Files
        id: changed-files
        uses: tj-actions/changed-files@v37.5.2

  #  - name: AWS Cli
  #    id: install-aws-cli
  #    uses: unfor19/install-aws-cli-action@v1
  #    with:
  #      version: 2                         # default
  #      verbose: false                     # default
  #      arch: amd64                        # allowed values: amd64, arm64
        
      - name: Install AWS CLI v2 and OS Packages
        run:  |
          #sudo apt-get install -y curl
          #not needed for GitHub hosted runners
          #curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "${GITHUB_WORKSPACE}/awscliv2.zip"
          #unzip -q /tmp/awscliv2.zip -d /tmp
          #unzip -q ${GITHUB_WORKSPACE}/awscliv2.zip -d ${GITHUB_WORKSPACE}/awscli
          #rm ${GITHUB_WORKSPACE}/awscliv2.zip
          #sudo /tmp/aws/install --update
          #rm -rf /tmp/aws/

          mkdir -p ${GITHUB_WORKSPACE}/tmp
          
          deployPackageHWM=5        
          echo "deploy=$deployPackageHWM" >> "$GITHUB_OUTPUT"
  
  createPackage:
    runs-on: [self-hosted, linux, X64]
    #runs-on: [ubuntu-latest]
    needs: preReqs
    outputs:
      runDeploy: ${{ steps.createPackage.outputs.deploy }}
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3
        #with:
        #  fetch-depth: 0
        #  path: INT-001
      
      - name: Changed Files
        id: changed-files
        uses: tj-actions/changed-files@v37.5.2

      # Runs a set of commands using the runners shell
      - name: Create Package
        id: createPackage
        run: |
          sudo apt-get install -y libxml2-utils jq

          BoomiAccount=${{ vars.BOOMI_ACCOUNT }}
          BoomiUsername=${{ vars.BOOMI_USERNAME }}
          API=${{ secrets.API }}
          RepoURL=${{ github.server_url }}
          RepoName=${{ github.repository }}
          RepoPath=${RepoURL}/${RepoName}
          GITUsername=${{ github.repository_owner }}
          GITUseremail=${{ vars.EMAIL }}
          CodeFolderXML=${{ vars.CODEFOLDER }}

          for file in ${{ steps.changed-files.outputs.all_changed_files }}; do
            funcTest=0
            sampleProc=0
            compCount=1

            compId=$(grep '^componentId=' $file | cut -f2 -d'=')
            compType=$(grep '^componentType=' $file | cut -f2 -d'=')
            compVer=$(grep '^ver=' $file | cut -f2 -d'=')
            compNotes=$(grep '^buildNotes=' $file | cut -f2 -d'=')
            deployPackage=$(grep '^targetEnv=' $file | cut -f2 -d'=')

            compCount=$(echo "$compId" | awk -F "," '{print NF-1}')
            compCount=$((compCount + 1))
            #echo number of Components: $compCount
            
            export WD=${GITHUB_WORKSPACE}/cli/scripts/
            export WORKSPACE=${GITHUB_WORKSPACE}/cli/scripts/
            export GITHUB_WORKSPACE

            find ${GITHUB_WORKSPACE} -name *.sh -exec chmod 700 {} \;

            source "${GITHUB_WORKSPACE}/cli/scripts/bin/propertiesCICD.sh" $BoomiAccount $BoomiUsername $API $RepoPath $GITUsername $GITUseremail $CodeFolderXML
            source ${GITHUB_WORKSPACE}/cli/scripts/bin/common.sh

            updateSchedule=$(grep '^updateSchedule=' $file | cut -f2 -d'=')
            if [ $updateSchedule == 1 ]
            then
              updateEnv=$(grep '^updateEnv=' $file | cut -f2 -d'=')
              _atomName=$(grep '^atomName=' $file | cut -f2 -d'=')
              _atomType=$(grep '^atomType=' $file | cut -f2 -d'=')
            fi
            
            for (( _compIdx=1 ; _compIdx <= $compCount ; _compIdx++ )) ; do
              _compId=$(echo $compId | cut -f $_compIdx -d",")
              #"${GITHUB_WORKSPACE}/cli/scripts/initcrPackage.sh" componentId=$_compId packageVersion=$compVer componentType=$compType notes="$compNotes" extractComponentXmlFolder="$CodeFolderXML"

              #echo compIdx is: $_compIdx
              if [ $updateSchedule == 1 ]
              then
                processScheduleId=$(grep '^processSchedule=' $file | cut -f2 -d'=' | cut -f1 -d'|' | tr -d '"')
                if [ $_compIdx == $processScheduleId ]
                then
                  echo Updating Process Schedule
                  processScheduleVal=$(grep '^processSchedule=' $file | cut -f2 -d'=' | cut -f2 -d'|')
                  
                  _years=$(echo $processScheduleVal | awk '{ print $1 }')
                  _months=$(echo $processScheduleVal | awk '{ print $2 }')
                  _daysOfMonth=$(echo $processScheduleVal | awk '{ print $3 }')
                  _daysOfWeek=$(echo $processScheduleVal | awk '{ print $4 }')
                  _hours=$(echo $processScheduleVal | awk '{ print $5 }')
                  _minutes=$(echo $processScheduleVal | awk '{ print $6 }' | tr -d '"')
                  #echo $_years $_months $_daysOfMonth $_daysOfWeek $_hours $_minutes
                  
                  "${GITHUB_WORKSPACE}/cli/scripts/bin/updateProcessSchedules.sh" atomName=$_atomName atomType=$_atomType componentId="$_compId" years="$_years" months="$_months" daysOfMonth="$_daysOfMonth" daysOfWeek="$_daysOfWeek" hours="$_hours" minutes="$_minutes"
                fi
              fi
            done
          done

          #Dev is already set
          deployPackageHWM=5
          
          if [ $deployPackage == "2.Test" ]
          then
            deployPackageHWM=3
          elif [ $deployPackage == "3.Prod" ]
          then
            deployPackageHWM=1
          fi

          echo "deploy=$deployPackageHWM" >> "$GITHUB_OUTPUT"
